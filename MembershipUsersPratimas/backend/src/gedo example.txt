// require('dotenv').config();
//
// const express = require('express');
// const cors = require('cors');
// const { MongoClient, ObjectId } = require('mongodb');

const URI = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@vigi-2.ov8wh.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`;
const PORT = process.env.DB_PORT;

const app = express();

app.use(cors(), express.json());

const client = new MongoClient(URI);

app.get('/posts', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const posts = await collection.find().toArray();
    await client.close();
    response.status(200).json(posts);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/posts/:postId', async (request, response) => {
  try {
    const { postId } = request.params;
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const posts = await collection.findOne(ObjectId(postId));
    await client.close();
    response.status(200).json(posts);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.patch('/posts/:postId', async (request, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const updatedPost = await collection.updateOne(
      { _id: ObjectId(request.params.postId) },
      [{ $unset: { comments: ['comment1', 'comment2', 'comment3'] } }],
    );
    await client.close();
    response.status(200).json(updatedPost);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/randomCount', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('companies');
    const postCursor = await collection.find({ founded_year: { $gte: 2012 } });
    const result = {
      totalCount: await postCursor.count(),
      posts: await postCursor.toArray(),
    };
    await client.close();
    response.status(200).json(result);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/randomDistinct', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('companies');
    const results = await collection.distinct('name', { founded_year: { $gte: 2012 } });
    await client.close();
    response.status(200).json(results);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/randomAggregate', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('trips');
    const results = collection.aggregate([
      { $match: { 'start station id': 476 } },
      {
        $group: {
          _id: '$gender',
          totalTripDuration: { $avg: '$tripduration' },
        },
      },
      {
        $project: {
          totalTripDuration: { $round: ['$totalTripDuration', 2] },
        },
      },
    ]).toArray();

    await client.close();
    response.status(200).json(results);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/asc', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const posts = await collection.find().sort({ date: 1 }).toArray();
    await client.close();
    response.status(200).json(posts);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.get('/dsc', async (_, response) => {
  try {
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const posts = await collection.find().sort('date', -1).toArray();
    await client.close();
    response.status(200).json(posts);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

app.post('/posts', async (request, response) => {
  try {
    const post = {
      ...request.body,
      date: new Date(),
    };
    await client.connect();
    const database = client.db('sample_training');
    const collection = database.collection('posts');
    const createdPost = await collection.insertOne(post);
    await client.close();
    response.status(200).json(createdPost);
  } catch (error) {
    response.status(500).json({ error: { ...error, message: 'Something went wrong' } });
  }
});

// app.listen(PORT, () => {
  console.log(
    `My app is running and listening to port http://localhost:${PORT}/`,
  );
});